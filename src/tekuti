#! /bin/bash
# -*- scheme -*-
exec guile $GUILE_FLAGS -s $0 "$@"
!#
;; Tekuti
;; Copyright (C) 2008 Andy Wingo <wingo at pobox dot com>

;; This program is free software; you can redistribute it and/or    
;; modify it under the terms of the GNU General Public License as   
;; published by the Free Software Foundation; either version 3 of   
;; the License, or (at your option) any later version.              
;;                                                                  
;; This program is distributed in the hope that it will be useful,  
;; but WITHOUT ANY WARRANTY; without even the implied warranty of   
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    
;; GNU General Public License for more details.                     
;;                                                                  
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;; This is the main script that will launch tekuti.
;;
;;; Code:


(use-modules (ice-9 rdelim))
(debug-enable 'backtrace)

(define *host* "127.0.0.1")
(define *port* 8081)
(define *backlog* 5)

(define *socket* (socket PF_INET SOCK_STREAM 0))
(bind *socket* AF_INET (inet-aton *host*) *port*)
(listen *socket* *backlog*)

(define (dbg fmt . args)
  (apply format (current-error-port) fmt args))

(define (strip-headers socket)
  (define (read-line*)
    (let ((line (read-line socket)))
      (if (eof-object? line)
          (error "unexpected eof")
          line)))
  (let lp ((keys '()) (values '()))
    (let ((k (read-line*)))
      (if (string=? k "end")
          (reverse (map cons keys values))
          (lp (cons k keys) (cons (read-line*) values))))))

(define (output-headers headers)
  (for-each
   (lambda (k v)
     (format #t "~a\n~a\n" k v))
   (map car headers) (map cdr headers))
  (display "end\n"))

(define (handle-request headers post-data)
  (output-headers '(("Status" . "200 OK")
                    ("Content-Type" . "text/html")))
  (display "<html><head><title>hello</title><body><p>hello world</p></body>"))

(define (connection-received socket sockaddr)
  (let ((headers (strip-headers socket))
        (post-data "")) ;; blocks: (read-delimited "" socket)))
    (dbg "~a" headers)
    (with-output-to-port socket
      (lambda ()
        (handle-request headers post-data)))
    (close-port socket)))

(define (event-loop)
  (pk 'listening)
  (let ((pair (accept *socket*)))
    (pk pair)
    (connection-received (car pair) (cdr pair))
    (pk 'done)
    (event-loop)))
    
(event-loop)
