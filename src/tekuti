#! /bin/bash
# -*- scheme -*-
exec guile $GUILE_FLAGS -l $0 -e main "$@"
!#
;; Tekuti
;; Copyright (C) 2008 Andy Wingo <wingo at pobox dot com>

;; This program is free software; you can redistribute it and/or    
;; modify it under the terms of the GNU General Public License as   
;; published by the Free Software Foundation; either version 3 of   
;; the License, or (at your option) any later version.              
;;                                                                  
;; This program is distributed in the hope that it will be useful,  
;; but WITHOUT ANY WARRANTY; without even the implied warranty of   
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    
;; GNU General Public License for more details.                     
;;                                                                  
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;; This is the main script that will launch tekuti.
;;
;;; Code:

;;hack!

(debug-enable 'backtrace)
(use-modules (tekuti git)
             (tekuti page)
             (tekuti util)
             (tekuti post)
             (tekuti categories)
             (tekuti mod-lisp)
             (tekuti web))

(define (handle-request headers post-data index)
  (let-headers headers ((method "method") (path "url"))
    (url-relative-path-case
     method path
     ((POST admin new-post)
      (unimplemented 'new-post))
     ((POST admin modify-post)
      (unimplemented 'modify-post))
     ((POST admin new-comment)
      (unimplemented 'new-comment))
     ((POST admin delete-comment)
      (unimplemented 'delete-comment))
     ((POST admin delete-post)
      (unimplemented 'delete-post))
     ((GET)
      (unimplemented 'index))
     ((GET archives year? month? day? post?)
      (unimplemented 'archives))
     ((GET debug)
      (page-debug headers))
     ((POST search)
      (unimplemented 'search))
     (else (page-not-found path)))))

(define (maybe-reindex old-master old-index)
  (let ((master (git-rev-parse "master")))
    (values
     master 
     (if (equal? master old-master)
         old-index
         (acons 'master master
                (map (lambda (k reindex)
                       (cons k (reindex master)))
                     (list 'posts 'categories)
                     (list reindex-posts reindex-categories)))))))

(define (main args)
  (ensure-git-repo)
  (event-loop handle-request maybe-reindex))

